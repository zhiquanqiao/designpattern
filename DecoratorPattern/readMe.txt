装饰器模式（Decorator Pattern）允许向一个现有对象添加新功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，他是作为心头类的一个包装。

这种模式创建了一个装饰类，用来包装原有的类，并在类方法签名完整性的前提下，提供了额外的功能。

意图：动态地给对象添加一些额外的职责。就新功能来说，装饰器模式相比生成子类更为灵活。

主要解决： 一般的，我们扩展一个类经常使用继承的方式实现，由于继承为类引入静态特性，并且随着功能的增所子类或很膨胀

何时使用：在不想增加子类的情况下扩展类。

关键代码：1.Component类充当抽象角色，不应该具体实现
          2.装饰类引用和继承Component类，具体扩展类重写父类的方法
优点：装饰类和被装饰类可以独立发展不会相互耦合装饰模式是继承的替代模式，装饰模式可以动态扩展一个实现类的共嗯那个
缺点：多层装饰比较复杂

